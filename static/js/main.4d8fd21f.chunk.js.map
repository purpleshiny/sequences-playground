{"version":3,"sources":["SequenceModal.js","SequenceTable.js","AddModal.js","SequencesViewer.js","App.js","serviceWorker.js","index.js"],"names":["SequenceModal","sequenceText","map","letter","i","className","key","Modal","trigger","Button","Header","Content","scrolling","this","colorSequence","props","sequence","Component","SequenceTable","state","column","direction","handleSort","bind","newColumn","oldColumn","oldDirection","sortedBy","setState","getDirection","item","filterText","sequenceName","toLowerCase","includes","sequenceDescription","data","items","filter","filterItem","sort","a","b","localeCompare","prepareData","Table","fixed","sortable","Row","HeaderCell","width","sorted","onClick","Body","Cell","substring","textAlign","emptyState","open","errors","AddModal","handleOpen","handleClose","handleChange","e","name","value","handleAdd","preventDefault","toUpperCase","validationFunc","length","addFunc","as","Form","closeIcon","error","closeOnDimmerClick","onClose","Input","label","onChange","TextArea","Message","header","content","join","Actions","SequencesViewer","addAnItem","validateAnItem","updateSearch","concat","_","find","push","nonDNA","search","Container","Grid","columns","Column","icon","placeholder","floated","App","examples","sequences","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d8fd21f.chunk.js","sourcesContent":["import React , { Component } from 'react';\nimport {Modal, Button} from \"semantic-ui-react\";\n\nexport default class SequenceModal extends Component {\n\n    // return an array of spans styled with a class of the same name as the letter,\n    // eg <span className=A>\n    colorSequence(sequenceText) {\n        return [...sequenceText].map((letter,i) => {return <span className={letter} key={i}>{letter}</span>});\n    }\n\n    render() {\n        return(\n            <Modal trigger={<Button>View</Button>}>\n                <Modal.Header>Sequence</Modal.Header>\n                <Modal.Content scrolling className=\"sequence\">\n                    {this.colorSequence(this.props.sequence)}\n                </Modal.Content>\n            </Modal>\n        )\n    }\n}","import React , { Component } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport SequenceModal from './SequenceModal';\n\nexport default class SequenceTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            column: \"sequenceName\",\n            direction: \"descending\"\n        };\n        this.handleSort = this.handleSort.bind(this);\n    }\n\n    getDirection(newColumn, oldColumn, oldDirection) {\n        // if we are re-sorting the current column, then we want to invert the current direction\n        if (newColumn === oldColumn) {\n            return oldDirection === \"ascending\" ? \"descending\" : \"ascending\";\n        }\n        // otherwise, just return the default for a new sort for the new column\n        return \"descending\";\n    }\n\n    handleSort(sortedBy) {\n        return () => {\n            this.setState((state) => ({\n                column: sortedBy,\n                direction: this.getDirection(sortedBy, state.column, state.direction)\n            }));\n        }\n    }\n\n    filterItem(item, filterText) {\n        if (item.sequenceName.toLowerCase().includes(filterText.toLowerCase())) {\n            return true;\n        }\n        if (item.sequenceDescription.toLowerCase().includes(filterText.toLowerCase())) {\n            return true;\n        }\n        return false;\n    }\n\n    prepareData(data, filterText, column, direction) {\n        let items = [];\n        if (filterText === \"\") {\n            items = [...data];\n        } else {\n            items = data.filter(item => this.filterItem(item, filterText))\n        }\n        if (direction === \"descending\") {\n            items = items.sort((a, b) => a[column].localeCompare(b[column]));\n        } else {\n            items = items.sort((a, b) => b[column].localeCompare(a[column]));\n        }\n        return items;\n    }\n\n    render() {\n        const {column, direction} = this.state;\n        const filterText = this.props.filterText;\n        let items = this.prepareData(this.props.items, filterText, column, direction)\n        return (\n            <Table fixed sortable>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell\n                            width=\"two\"\n                            sorted={column === 'sequenceName' ? direction : null}\n                            onClick={this.handleSort('sequenceName')}\n                        >\n                            Name\n                        </Table.HeaderCell>\n                        <Table.HeaderCell\n                            width=\"six\"\n                            sorted={column === 'sequenceDescription' ? direction : null}\n                            onClick={this.handleSort('sequenceDescription')}\n                        >\n                            Description\n                        </Table.HeaderCell>\n                        <Table.HeaderCell width=\"six\">Sequence Preview</Table.HeaderCell>\n                        <Table.HeaderCell width=\"two\"></Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                {\n                    items.map((item) => (\n                    <Table.Row key={item.sequenceName}>\n                         <Table.Cell>{item.sequenceName}</Table.Cell>\n                         <Table.Cell>{item.sequenceDescription}</Table.Cell>\n                         <Table.Cell>{item.sequence.substring(0, 100) + \"...\"}</Table.Cell>\n                         <Table.Cell textAlign=\"center\"><SequenceModal sequence={item.sequence}></SequenceModal></Table.Cell>\n                     </Table.Row>\n                    ))\n                }\n                </Table.Body>\n            </Table>\n        )\n    }\n\n}","import React , { Component } from 'react';\nimport {Modal, Form, Button, Message} from 'semantic-ui-react';\n\n// we will want the state to look like this initially, after a successful save, and after closing the window\nconst emptyState = {\n    sequenceName: \"\",\n    sequenceDescription: \"\",\n    sequence: \"\",\n    open: false,\n    errors: []\n}\n\n// required props: an addFunc and a validationFunc\nexport default class AddModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = emptyState;\n      }\n\n    handleOpen = () => this.setState({ open: true });\n\n    handleClose = () => this.setState(emptyState);\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value, errors: [] });\n\n    handleAdd = (e) => {\n        e.preventDefault();\n        const item = {\n            \"sequenceName\": this.state.sequenceName,\n            \"sequenceDescription\": this.state.sequenceDescription,\n            \"sequence\": this.state.sequence.toUpperCase() // this seems like the right thing to do\n        };\n        let errors = this.props.validationFunc(item);\n        if (errors.length === 0) {\n            this.props.addFunc(item);\n            this.setState(emptyState);\n        } else {\n            this.setState({errors: errors});\n        }\n    }\n\n    render() {\n        const { sequenceName, sequenceDescription, sequence, errors, open } = this.state;\n        return(\n            <Modal as={Form}\n                   trigger={<Button onClick={this.handleOpen}>Add Sequence</Button>}\n                   closeIcon\n                   error = {errors.length > 0}\n                   closeOnDimmerClick={false}\n                   onClose={this.handleClose}\n                   open={open}>\n                <Modal.Header>Add New Sequence</Modal.Header>\n                <Modal.Content>\n                    <Form.Input \n                    label=\"Sequence Name\"\n                    name=\"sequenceName\"\n                    value={sequenceName}\n                    onChange={this.handleChange}\n                    />\n                    <Form.Input\n                    label=\"Sequence Description\"\n                    name=\"sequenceDescription\"\n                    value={sequenceDescription}\n                    onChange={this.handleChange}\n                    />\n                    <Form.TextArea\n                    label=\"Sequence\"\n                    name=\"sequence\"\n                    value={sequence}\n                    onChange={this.handleChange}\n                    />\n                    <Message\n                    error\n                    header=\"Error adding sequence\"\n                    content={errors.join(\"; \")}\n                    />\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={this.handleAdd}>Add</Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}","import React , { Component } from 'react';\nimport _ from 'lodash';\nimport { Container, Grid, Input} from \"semantic-ui-react\";\nimport SequenceTable from './SequenceTable';\nimport AddModal from './AddModal';\n\nexport default class SequencesViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {items: props.items, filterText: \"\"};\n        this.addAnItem = this.addAnItem.bind(this);\n        this.validateAnItem = this.validateAnItem.bind(this);\n        this.updateSearch = this.updateSearch.bind(this);\n    }\n\n    // I decided to pass addAnItem and validateAnItem as functions to the add modal\n    // rather than passing all the data in, because it feels like the modal should not depend\n    // on receiving all of that context, just on the existence of something which can\n    // handle validation and updates. In a world with upload, it could reuse this functionality.\n\n    addAnItem(item) {\n        this.setState((state) => ({items: state.items.concat(item)}));\n    }\n\n    // given a sequence entry, return an array of errors\n    // consider breaking this up in some way if more validation logic is added\n    validateAnItem(item) {\n        let errors = [];\n        if (_.find(this.state.items, {sequenceName: item.sequenceName})) {\n            errors.push(\"There's already a sequence with this name\");\n        }\n        if (_.find(this.state.items, {sequence: item.sequence})) {\n            errors.push(\"There's already another entry for this sequence\");\n        }\n        if (item.sequenceName === \"\") {\n            errors.push(\"Name is required\");\n        }\n        if (item.sequenceDescription === \"\") {\n            errors.push(\"Description is required\");\n        }\n        if (item.sequence === \"\") {\n            errors.push(\"Sequence is required\");\n        } \n        // We only need the first occurance of a non-allowed letter, so .search makes sense here\n        let nonDNA = item[\"sequence\"].search(/[^ATCG]/g);\n        if (nonDNA !== -1) {\n            errors.push(`Non-DNA character found at position ${nonDNA}`);\n        }\n        return errors;\n    }\n\n    // it would be great to debounce this\n    updateSearch(e, data) {\n        this.setState({filterText: data.value});\n    }\n\n    render() {\n        return (\n            <Container>\n                <Grid columns={2}>\n                    <Grid.Column width={13}>\n                    <Input icon='search' placeholder='Search...' onChange={this.updateSearch}/>\n                    </Grid.Column>\n                    <Grid.Column width={3} floated=\"right\">\n                        <AddModal addFunc={this.addAnItem} validationFunc={this.validateAnItem}></AddModal>\n                    </Grid.Column>\n                </Grid>\n                <SequenceTable items={this.state.items} filterText={this.state.filterText}></SequenceTable>\n            </Container>\n        )\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport SequencesViewer from './SequencesViewer';\nimport examples from './ExampleSequences.json';\nimport {Container, Header} from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <div>\n      <Header as=\"h1\" textAlign=\"center\" className=\"App-header\">DNA Sequences</Header> \n      <Container>\n        <SequencesViewer items={examples.sequences}></SequencesViewer>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}