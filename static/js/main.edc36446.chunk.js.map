{"version":3,"sources":["SequenceModal.js","SequenceTable.js","AddModal.js","SequencesViewer.js","App.js","serviceWorker.js","index.js"],"names":["SequenceModal","letter","i","className","key","sequenceText","map","item","renderLetter","Modal","trigger","Button","Header","Content","scrolling","this","taggedSequence","props","sequence","Component","SequenceTable","state","column","direction","handleSort","bind","newColumn","oldColumn","oldDirection","sortedBy","setState","getDirection","filterText","sequenceName","toLowerCase","includes","sequenceDescription","data","items","filter","filterItem","sort","a","b","localeCompare","prepareData","Table","fixed","sortable","Row","HeaderCell","width","sorted","onClick","Body","Cell","substring","textAlign","emptyState","open","errors","AddModal","handleOpen","handleAdd","handleClose","handleChange","e","name","value","preventDefault","toUpperCase","validFunc","length","addFunc","as","Form","closeIcon","error","closeOnDimmerClick","onClose","Input","label","onChange","TextArea","Message","header","content","join","Actions","SequencesViewer","addAnItem","validateAnItem","updateSearch","concat","_","find","push","nonDNA","search","Container","Grid","columns","Column","icon","placeholder","floated","App","examples","sequences","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edc36446.chunk.js","sourcesContent":["import React , { Component } from 'react';\nimport {Modal, Button} from \"semantic-ui-react\";\n\nexport default class SequenceModal extends Component {\n\n    renderLetter(letter, i) {\n        return <span className={letter} key={i}>{letter}</span>\n    }\n\n    taggedSequence(sequenceText) {\n        let sequenceArr = [...sequenceText]\n        return sequenceArr.map((item,i) => {return this.renderLetter(item, i)})\n    }\n\n    render() {\n        return(\n            <Modal trigger={<Button>View</Button>}>\n                <Modal.Header>Sequence</Modal.Header>\n                <Modal.Content scrolling className=\"sequence\">\n                    {this.taggedSequence(this.props.sequence)}\n                </Modal.Content>\n            </Modal>\n        )\n    }\n}","import React , { Component } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport SequenceModal from './SequenceModal';\n\nexport default class SequenceTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            column: \"sequenceName\",\n            direction: \"descending\"\n        };\n        this.handleSort = this.handleSort.bind(this);\n    }\n\n    getDirection(newColumn, oldColumn, oldDirection) {\n        // if we are re-sorting the current column, then we want to invert the current direction\n        if (newColumn === oldColumn) {\n            return oldDirection === \"ascending\" ? \"descending\" : \"ascending\"\n        }\n        // otherwise, just return the default for a new sort for the new column\n        return \"descending\"\n    }\n\n    handleSort(sortedBy) {\n        return () => {\n            this.setState((state) => ({\n                column: sortedBy,\n                direction: this.getDirection(sortedBy, state.column, state.direction)\n            }));\n        }\n    }\n\n    filterItem(item, filterText) {\n        if (item.sequenceName.toLowerCase().includes(filterText.toLowerCase())) {\n            return true;\n        }\n        if (item.sequenceDescription.toLowerCase().includes(filterText.toLowerCase())) {\n            return true;\n        }\n        return false;\n    }\n\n    prepareData(data, filterText, column, direction) {\n        let items = []\n        if (filterText === \"\") {\n            items = [...data]\n        } else {\n            items = data.filter(item => this.filterItem(item, filterText))\n        }\n        if (direction === \"descending\") {\n            items = items.sort((a, b) => a[column].localeCompare(b[column]))\n        } else {\n            items = items.sort((a, b) => b[column].localeCompare(a[column]))\n        }\n        return items\n    }\n\n    render() {\n        const {column, direction} = this.state;\n        const filterText = this.props.filterText;\n        let items = this.prepareData(this.props.items, filterText, column, direction)\n        //TODO: sort by direction and column\n        //TODO: update direction and column from header row click\n        return (\n            <Table fixed sortable>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell\n                            width=\"two\"\n                            sorted={column === 'sequenceName' ? direction : null}\n                            onClick={this.handleSort('sequenceName')}\n                        >\n                            Name\n                        </Table.HeaderCell>\n                        <Table.HeaderCell\n                            width=\"six\"\n                            sorted={column === 'sequenceDescription' ? direction : null}\n                            onClick={this.handleSort('sequenceDescription')}\n                        >\n                            Description\n                        </Table.HeaderCell>\n                        <Table.HeaderCell width=\"six\">Sequence Preview</Table.HeaderCell>\n                        <Table.HeaderCell width=\"two\"></Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                {\n                    items.map((item) => (\n                    <Table.Row key={item.sequenceName}>\n                         <Table.Cell>{item.sequenceName}</Table.Cell>\n                         <Table.Cell>{item.sequenceDescription}</Table.Cell>\n                         <Table.Cell>{item.sequence.substring(0, 100) + \"...\"}</Table.Cell>\n                         <Table.Cell textAlign=\"center\"><SequenceModal sequence={item.sequence}></SequenceModal></Table.Cell>\n                     </Table.Row>\n                    ))\n                }\n                </Table.Body>\n            </Table>\n        )\n    }\n\n}","import React , { Component } from 'react';\nimport {Modal, Form, Button, Message} from 'semantic-ui-react';\n\nconst emptyState = {\n    sequenceName: \"\",\n    sequenceDescription: \"\",\n    sequence: \"\",\n    open: false,\n    errors: []\n}\n\n// things this needs to be given:\n// a validate method that knows the up-to-date state of all sequences\nexport default class AddModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n        this.state = emptyState\n      }\n\n    handleOpen = () => this.setState({ open: true })\n\n    handleClose() {\n        this.setState(emptyState);\n    }\n\n    handleChange(e, { name, value }) {\n        this.setState({ [name]: value, errors: [] })\n    } \n\n    handleAdd(e) {\n        e.preventDefault();\n        const item = {\n            \"sequenceName\": this.state.sequenceName,\n            \"sequenceDescription\": this.state.sequenceDescription,\n            \"sequence\": this.state.sequence.toUpperCase()\n        };\n        let errors = this.props.validFunc(item);\n        if (errors.length === 0) {\n            this.props.addFunc(item);\n            this.handleClose();\n        } else {\n            this.setState({errors: errors})\n        }\n        \n    }\n\n    render() {\n        const { sequenceName, sequenceDescription, sequence } = this.state\n        return(\n            <Modal as={Form}\n                   trigger={<Button onClick={this.handleOpen}>Add Sequence</Button>}\n                   closeIcon\n                   error = {this.state.errors.length > 0}\n                   closeOnDimmerClick={false}\n                   onClose={this.handleClose}\n                   open={this.state.open}>\n                <Modal.Header>Add New Sequence</Modal.Header>\n                <Modal.Content>\n                    <Form.Input \n                    label=\"Sequence Name\"\n                    name=\"sequenceName\"\n                    value={sequenceName}\n                    onChange={this.handleChange}\n                    />\n                    <Form.Input\n                    label=\"Sequence Description\"\n                    name=\"sequenceDescription\"\n                    value={sequenceDescription}\n                    onChange={this.handleChange}\n                    />\n                    <Form.TextArea\n                    label=\"Sequence\"\n                    name=\"sequence\"\n                    value={sequence}\n                    onChange={this.handleChange}\n                    />\n                    <Message\n                    error\n                    header=\"Error adding sequence\"\n                    content={this.state.errors.join(\"; \")}\n                    />\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={this.handleAdd}>Add</Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}","import React , { Component } from 'react';\nimport _ from 'lodash';\nimport { Container, Grid, Input} from \"semantic-ui-react\";\nimport SequenceTable from './SequenceTable';\nimport AddModal from './AddModal';\n\nexport default class SequencesViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {items: props.items, filterText: \"\"};\n        this.addAnItem = this.addAnItem.bind(this);\n        this.validateAnItem = this.validateAnItem.bind(this);\n        this.updateSearch = this.updateSearch.bind(this);\n    }\n\n    // I decided to pass addAnItem and validateAnItem as functions to the add modal\n    // rather than passing all the data in, because it feels like the modal should not depend\n    // on receiving all of that context, just on the existence of something which can\n    // handle validation and updates.\n\n    addAnItem(item) {\n        this.setState((state) => ({items: state.items.concat(item)}))\n    }\n\n    // return an array of errors\n    validateAnItem(item) {\n        let errors = [];\n        if (_.find(this.state.items, {sequenceName: item.sequenceName})) {\n            errors.push(\"There's already a sequence with this name\");\n        }\n        if (_.find(this.state.items, {sequence: item.sequence})) {\n            errors.push(\"There's already another entry for this sequence\");\n        }\n        if (item.sequenceName === \"\") {\n            errors.push(\"Name is required\");\n        }\n        if (item.sequenceDescription === \"\") {\n            errors.push(\"Description is required\");\n        }\n        if (item.sequence === \"\") {\n            errors.push(\"Sequence is required\");\n        } \n        // We only need the first occurance of a non-allowed letter, so .search makes sense\n        let nonDNA = item[\"sequence\"].search(/[^ATCG]/g);\n        if (nonDNA !== -1) {\n            errors.push(`Non-DNA character found at position ${nonDNA}`);\n        }\n        return errors;\n    }\n\n    // it would be great to debounce this\n    updateSearch(e, data) {\n        this.setState({filterText: data.value})\n    }\n\n    render() {\n        return (\n            <Container>\n                <Grid columns={2}>\n                    <Grid.Column width={13}>\n                    <Input icon='search' placeholder='Search...' onChange={this.updateSearch}/>\n                    </Grid.Column>\n                    <Grid.Column width={3} floated=\"right\">\n                        <AddModal addFunc={this.addAnItem} validFunc={this.validateAnItem}></AddModal>\n                    </Grid.Column>\n                </Grid>\n                <SequenceTable items={this.state.items} filterText={this.state.filterText}></SequenceTable>\n            </Container>\n        )\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport SequencesViewer from './SequencesViewer';\nimport examples from './ExampleSequences.json';\nimport {Container, Header} from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <div>\n      <Header as=\"h1\" textAlign=\"center\" className=\"App-header\">DNA Sequences</Header>    <Container>\n      <SequencesViewer items={examples.sequences}></SequencesViewer>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}